section .text
   global _start         ; precisa ser declarado para o gcc

_start:                  ; informa o linker sobre o procedimento de entrada
   ; cria o arquivo
   mov eax, 8            ; chamada de sistema (sys_open)
   mov ebx, image_color  ; nome do arquivo
   mov ecx, 664o         ; leitura e escrita para usuario e grupo, somente leitura para os demais (sufixo 'o' para base octal)
   int 0x80              ; interrupcao
   mov outimg_B&W, eax     ; salva o descritor do arquivo que retornou
    
   ; escreve no arquivo
   mov eax, 4            ; chamada de sistema (sys_write)
   mov ebx, [fd_in]      ; descritor do arquivo
   mov ecx, color_img    ; conteudo a ser escrito
   mov edx, len          ; numero de bytes
   int 0x80

   ; fecha o arquivo
   mov eax, 6            ; chamada de sistema (sys_close)
   mov ebx, [fd_in]      ; descritor do arquivo
   int 0x80

  ;Deixar imagens com as mesmas dimens√µes
    mov     eax, color_img
    mov     ecx, B&W_img 
    mov     e9, 0

loop:
    mov     e8, [rax]
    mov     [ecx], e8
    inc     eax
    inc     ecx
    inc     e9
    cmp     e9, 47
    jne     loop

; Converte imagem colorida para cinza
    mov     eax, color_img + 54
    mov     ecx, B&W_img + 54

loop1:
    mov     e10b, [eax]     ;
    shr     e10b, 2         ; 

    mov     e11b, [eax+1]   ; 
    shr     e11b, 1         ; 

    mov     e12b, [eax+2]   ; 
    shr     e12b, 2         ; 

    add     e10b, e11b      ;
    add     e10b, e12b      ; 

    mov     [ecx], e10b
    mov     [ecx+1], e10b
    mov     [ecx+2], e10b

    add     eax, 3
    add     ecx, 3

    cmp     eax, gray_img
    jne     loop1

   ; imprime mensagem indicando escrita do arquivo
   mov eax, 4            ; chamada de sistema (sys_write)
   mov ebx, 1            ; descritor (saida padrao)
   mov ecx, msg_done     ; conteudo a ser escrito
   mov edx, len_done     ; numero de bytes
   int  0x80
    
   ; abre arquivo para leitura
   mov eax, 5            ; chamada de sistema (sys_open)
   mov ebx, outimg_B&W   ; nome do arquivo
   mov ecx, 0            ; apenas para leitura
   mov edx, 664o         ; leitura e escrita para usuario e grupo, somente leitura para os demais (sufixo 'o' para base octal)
   int  0x80
   mov  [fd_out], eax     ; salva o descrito do arquivo que retornou
    
   ; escreve a imagem cinza no arquivo
    mov     eax, 4            ; chamada de sistema (sys_write)
    mov     ebx, [fd_out]     ; descritor do arquivo
    mov     ecx, gray_img     ; conteudo a ser escrito
    mov     edx, len          ; numero de bytes
    int     0x80

   ; fecha o arquivo da imagem cinza
    mov     eax, 6            ; chamada de sistema (sys_close)
    mov     ebx, [fd_out]     ; descritor do arquivo
    int     0x80

   ; imprime a informacao lida
   mov eax, 4            ; chamada de sistema (sys_write)
   mov ebx, 1            ; descritor (saida padrao)
   mov ecx, info         ; conteudo a ser escrito
   mov edx, len          ; numero de bytes
   int 0x80

   ; imprime mensagem de debug
   mov eax, 4            ; chamada de sistema (sys_write)
   mov ebx, 1            ; descritor (saida padrao)
   mov ecx, msg_debug    ; conteudo a ser escrito
   mov edx, len_debug    ; numero de bytes
   int  0x80
    
   ; encerra o programa
   mov eax, 1            ; chamada de sistema (sys_exit)
   mov ebx, 0
   int 0x80

section .data
image_color db "lena_color.bmp", 0x0
msg db 'Welcome to Tutorials Point (corrected)!', 0xa
len equ $-msg

outimg_B&W db  "lena_B&W.bmp", 0xa
len_done equ $-msg_done

msg_debug db 'Debug...', 0xa
len_debug equ $-msg_debug

section .bss
fd_out resb  1
fd_in  resb  1
color_img resb len
B&W_img resb len
