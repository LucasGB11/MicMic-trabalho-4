section.data
path_image_color db "lena_color.bmp", 0
path_outimg_bright db  "lena_brightness.bmp", 0
len equ 786486
const equ 55
; const db 5

section .bss
fd_out resb 1
fd_in resb 1
color_img resb len
bright_img resb len

section	.text
   global _start                    ; must be declared for using gcc

_start:                             ; informa o linker sobre o procedimento de entrada

; Abrindo a imagem colorida

    mov     eax, 5                   ; chamada de sistema (sys_open)
    mov     ebx, path_image_color; nome do arquivo
    mov     ecx, 0; apenas para leitura
    mov     edx, 664o                ; leitura e escrita para usuario e grupo, somente leitura para os demais (sufixo 'o' para base octal)
    int     0x80
    mov     [fd_in], eax             ; salva o descrito do arquivo que retornou

; Lendo a imagem  e salvando em color_img 

    mov     eax, 3                  ; chamada de sistema (sys_read)
    mov     ebx, [fd_in]            ; descritor do arquivo
    mov     ecx, color_img          ; buffer que recebe os dados lidos
    mov     edx, len                ; numero de bytes
    int     0x80

; Fecha o arquivo

    mov     eax, 6                  ; chamada de sistema (sys_close)
    mov     ebx, [fd_in]            ; descritor do arquivo
    int     0x80

; Copiar o cabe√ßalho para a imagem de saida

    mov     eax, color_img 
    mov     ecx, bright_img
    mov     e9, 0

header_loop:
    mov     e8, [eax]
    mov     [ecx], r8
    inc     eax
    inc     ecx
    inc     e9
    cmp     e9, 47
    jne     header_loop

; Converte imagem colorida para preto e branco

    mov     eax, color_img + 54
    mov     ecx, bright_img + 54

brightness_loop:
    mov     e10b, [eax]; e10b recebe azul (B) +brilho
    add     e10b, const
    
    mov     e11b, [eax + 1]; e11b recebe verde (G) +brilho
    add     e11b, const

    mov     e12b, [eax + 2]; e12b recebe vermelho (R) +brilho
    add     e12b, const

    mov     [ecx], e10b
    mov     [ecx + 1], e11b
    mov     [ecx+2], e12b

    add     eax, 3
    add     ecx, 3

    cmp     eax, bright_img
    jne     brightness_loop

   ; cria o arquivo para armazenar a imagem cinza

    mov     eax, 8            
    mov     ebx, path_outimg_bright    
    mov     ecx, 664o
    int     0x80     
    mov     [fd_out], eax

   ; escreve a imagem cinza no arquivo

    mov     eax, 4            ; chamada de sistema (sys_write)
    mov     ebx, [fd_out]; descritor do arquivo
    mov     ecx, bright_img; conteudo a ser escrito
    mov     edx, len; numero de bytes
    int     0x80

   ; fecha o arquivo da imagem cinza

    mov     eax, 6            ; chamada de sistema (sys_close)
    mov     ebx, [fd_out]; descritor do arquivo
    int     0x80

    ; encerra o programa

    mov     eax, 0            ; chamada de sistema (sys_exit)
    int     0x80
